CLEAN ARCHITECTURE
(ONION ARCHITECTURE)

E-book: 
https://aka.ms/webappebook

Docs: 
https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/
 
Github: 
https://github.com/dotnet-architecture/eShopOnWeb

Kullanacağımız Veritabanı:
PostgreSQL (postgres:123 port:5432)

Proje Yapısı
src
- Web			=> MVC
- Infrastructure	=> DbContext, Implementations
- ApplicationCore	=> Entities, Interfaces
tests
- UnitTests		=> Brim Testleri

Tasarım Prensipleri
- Separation of concerns
- Encapsulation
- Dependency inversion
- Single responsibility
- Dont reapeat yourself
- Persistence ignorance
- Bounded contexts

Görevler:
1. Blank Solution Oluştur
2. src ve test Solution klasörlerini oluştur
3. 4 adet proje olştur
4. Github'a yükle

Adımlar(Blank Solution oluşturduktan sonra):
1- src ve tests adında kalsörler oluşturduk

--------------------------------------------------------------------------------------------------

2- src içerisine "Class Library" projesi ekliyoruz ve adını "ApplicationCore" diyoruz. Location sonuna "\src" klasörünü ekle.

--------------------------------------------------------------------------------------------------

3- src içerisine "Class Library" projesi ekliyoruz ve adını "Infrastructure" diyoruz. Location sonuna "\src" klasörünü ekle.

--------------------------------------------------------------------------------------------------

4- src içerisine ASP Core MVC projesi ekliyoruz adını "Web" diyoruz. Location sonuna "\src" klasörünü ekle. (Authentication type: Individual Acoounts)

--------------------------------------------------------------------------------------------------

5- tests klasörüne "xUnit Test project" projesi ekliyoruz adını.Location sonuna "\tests" klasörünü ekle.

--------------------------------------------------------------------------------------------------

6- projemizi GitHub'a koyduk

--------------------------------------------------------------------------------------------------

7- ApplicationCore projesinde "Entities" adında bir klasör ve içerisinde "BaseEntity" adında bir sınıf oluştur.

--------------------------------------------------------------------------------------------------

8- Sınıf içine aşağıdaki prop. ekle
     public virtual int Id { get; set; }

--------------------------------------------------------------------------------------------------

9- Aynı klasörde Category.cs oluştur BaseEntity'den miras al aşağıdaki prop ekle
	public string Name { get; set; } = null!;

--------------------------------------------------------------------------------------------------

10- Aynı klasörde Brand.cs oluştur BaseEntity'den miras al aşağıdaki prop ekle
	public string Name { get; set; } = null!;

--------------------------------------------------------------------------------------------------

11- Aynı klasörde Product.cs oluştur BaseEntity'den miras al aşağıdaki prop ekle
	  public string Name { get; set; } = null!;
        public string? Description { get; set; }
        public decimal Price { get; set; }
        public string? PictureUri { get; set; }
        public int CategoryId { get; set; }
        public int BrandId { get; set; }
        public Category Category { get; set; } = null!;
        public Brand Brand { get; set; } = null!;

--------------------------------------------------------------------------------------------------

12- "ApplicationCore" projesine "Interfaces" adında bir klasör açıp içerisine "IRepository.cs" interface'i açıyoruz. (Repository Design)

public interface IRepository<T> where T : BaseEntity
    {
        Task<T?> GetByIdAsync(int id);
        Task<List<T>> GetAllAsync();
        Task<T> AddAsync(T entity);
        Task UpdateAsync(T entity);
        Task DeleteAsync(T entity);
    }

--------------------------------------------------------------------------------------------------

13- Solutionın kendisine README.md dosyası ekliyoruz

# AromaVilla
A Sample N-layered .NET Core Project Demonstrating Clean Architecture and the Generic Reposityory Pattern

## Packages

## ApplicationCore
```
Install-Package Ardalis.Specification -v 6.1.0
```

--------------------------------------------------------------------------------------------------

14- Package Manager Console'dan src\ApplicationCore seçili iken aşağıdakini yükle

Install-Package Ardalis.Specification -v 6.1.0 

--------------------------------------------------------------------------------------------------

15- IRepository.cs içine aşağıdaki metotları da ekle

	  Task<T?> GetByIdAsync(int id);
        Task<List<T>> GetAllAsync();
        Task<List<T>> GetAllAsync(ISpecification<T> specification);
        Task<T> AddAsync(T entity);
        Task UpdateAsync(T entity);
        Task DeleteAsync(T entity);
        Task<int> CountAsync(ISpecification<T> specification);
        Task<T> FirstAsync(ISpecification<T> specification);
        Task<T?> FirsOrDefaultAsync(ISpecification<T> specification);

--------------------------------------------------------------------------------------------------

16- "Infrastructure" içine "Data" klasörü aç ve "ShopContext.cs" sınıfı oluştur

--------------------------------------------------------------------------------------------------

17- EF paketlerini "Infrastructure" içine kur

Install-Package Microsoft.EntityFrameworkCore -v 6.0.15
Install-Package Microsoft.EntityFrameworkCore.Tools -v 6.0.15
Install-Package Npgsql.EntityFrameworkCore.PostgreSQL -v 6.0.8

--------------------------------------------------------------------------------------------------

18- "ShopContext.cs" içierisini

public class ShopContext : DbContext
    {
        public ShopContext(DbContextOptions<ShopContext> options) : base(options)
        {

        }

        public DbSet<Category> Categories => Set<Category>();
        public DbSet<Brand> Brands => Set<Brand>();
        public DbSet<Product> Products => Set<Product>();

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Fluent api ayar dosyası oluşturacaz içini burda okutacaz
            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
        }
    }

--------------------------------------------------------------------------------------------------

19- Data klasörü içine "Config" klasörü aç. İçine Category ayarları için "CategoryConfiguration.cs" sınıfı oluştur. Interface'i implement et

 public class CategoryConfiguration : IEntityTypeConfiguration<Category>
    {
        public void Configure(EntityTypeBuilder<Category> builder)
        {
            builder.Property(x => x.Name)
                .HasMaxLength(100);
        }
    }


--------------------------------------------------------------------------------------------------

20- 19. maddedeki işlemlerin aynısını BrandConfiguration ve ProductConfiguration için yap ancak Product için ekstra olarak ekle

   builder.Property(x => x.Price)
                .HasPrecision(18, 2);

--------------------------------------------------------------------------------------------------

21-  appsettings'e connection string oluştur
 "ShopContext": "Host=localhost;Database=ShopContextDb;Username=postgres;Password=123"

--------------------------------------------------------------------------------------------------

22- program.cs add services

// Add services to the container.
builder.Services.AddDbContext<ShopContext>(options => options
    .UseNpgsql(builder.Configuration
        .GetConnectionString("ShopContext")));

builder.Services.AddDbContext<AppIdentityDbContext>(options => options
    .UseNpgsql(builder.Configuration
        .GetConnectionString("AppIdentityDbContext")));


builder.Services.AddDatabaseDeveloperPageExceptionFilter();



builder.Services.AddDefaultIdentity<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = true)
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<AppIdentityDbContext>();
builder.Services.AddControllersWithViews();

--------------------------------------------------------------------------------------------------

23- migration. birden fazla context olacağı için Context'i seç

Add-Migration InitialCreate -context ShopContext -OutputDir Data/Migrations

--------------------------------------------------------------------------------------------------

24- Update-Database -context ShopContext

--------------------------------------------------------------------------------------------------

25- "Web" katmanındaki "ApplicationDbContext.cs" sınıfını "Infrastructure" katmanına taşı

"Web" içindeki "Data" klasörünü sil ve hata veren yerleri yoruma al

"Infrastructure" paketlerinde sadece bunlar olacak

Microsoft.AspNetCore.Identity.EntityFrameworkCore
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Tools
Npgsql.EntityFrameworkCore.PostgreSQL


"Web" paketleri

Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore
Microsoft.AspNetCore.Identity.UI
Microsoft.EntityFrameworkCore.Tools

--------------------------------------------------------------------------------------------------

26- "Infrastructure" içine "Identity" adınde klasör aç

AppIdentityDbContext.cs sınıfı oluştur

    public class AppIdentityDbContext : IdentityDbContext<ApplicationUser>
    {
        public AppIdentityDbContext(DbContextOptions<AppIdentityDbContext> options) : base(options)
        {

        }
    }


ApplicationUser.cs sınıfı oluştur
--------------------------------------------------------------------------------------------------

27- program.cs içerisinde servislere 

// Add services to the container.
builder.Services.AddDbContext<ShopContext>(options => options
    .UseNpgsql(builder.Configuration
        .GetConnectionString("ShopContext")));

builder.Services.AddDbContext<AppIdentityDbContext>(options => options
    .UseNpgsql(builder.Configuration
        .GetConnectionString("AppIdentityDbContext")));

ekle

--------------------------------------------------------------------------------------------------

28- appsettings.json ConnectionStrings değiştir

  "ConnectionStrings": {
    "AppIdentityDbContext": "Host=localhost;Database=IdentityContextDb;Username=postgres;Password=123",
    "ShopContext": "Host=localhost;Database=ShopContextDb;Username=postgres;Password=123"
  },

--------------------------------------------------------------------------------------------------

29- Migration ve Update leri yap

Add-Migration InitialIdentity -context AppIdentityDbContext -OutputDir Identity/Migrations

Update-Database -context AppIdentityDbContext

--------------------------------------------------------------------------------------------------

30- Parfüm resimleri olan bir site bul - https://www.perfume.com/

Web > wwwroot > img > produtcs içine resimleri at

--------------------------------------------------------------------------------------------------

31-  Infrastructure > Data içine ShopContextSeed.cs oluştur 

ShopContextSeed.cs.txt içerisini kopyala yapıştır

--------------------------------------------------------------------------------------------------

32- LoginPartial inject leri değiştir

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

--------------------------------------------------------------------------------------------------

33- Program.cs'e run'dan önce ekle

using (var scope = app.Services.CreateScope())
{
    var shopContext = scope.ServiceProvider.GetRequiredService<ShopContext>(); // db'yi program çalışmadan önce enjekte ettik
    await ShopContextSeed.SeedAsync(shopContext);
} 

--------------------------------------------------------------------------------------------------

33- "Application Core" içerisine "Constant" klasörü aç "AuthorizationConstants.cs" sınıfı aç

 public static class AuthorizationConstants
    {
        public const string DEFAULT_DEMO_USER = "demouser@exampler.com";
        public const string DEFAULT_ADMIN_USER = "admin@example.com";
        public const string DEFAULT_PASSWORD = "P@ssword1";

        public static class Roles
        {
            public const string ADMINSTRATOR = "Admin";
        }
    }

--------------------------------------------------------------------------------------------------

34- "Identity" klasörü içine "AppIdentityDbContextSeed.cs" snıfı oluştur

 public class AppIdentityDbContextSeed
    {
        public static async Task SeedAsync(AppIdentityDbContext db, RoleManager<IdentityRole> roleManager, UserManager<ApplicationUser> userManager)
        {
            await db.Database.MigrateAsync();

            if (await roleManager.Roles.AnyAsync() || await userManager.Users.AnyAsync()) return;

            await roleManager.CreateAsync(new IdentityRole(AuthorizationConstants.Roles.ADMINSTRATOR));

            var adminUser = new ApplicationUser()
            {
                Email = AuthorizationConstants.DEFAULT_ADMIN_USER,
                UserName= AuthorizationConstants.DEFAULT_ADMIN_USER,
                EmailConfirmed = true
            };
            await userManager.CreateAsync(adminUser, AuthorizationConstants.DEFAULT_PASSWORD);
            await userManager.AddToRoleAsync(adminUser, AuthorizationConstants.Roles.ADMINSTRATOR);

            var demoUser = new ApplicationUser()
            {
                Email = AuthorizationConstants.DEFAULT_DEMO_USER,
                UserName= AuthorizationConstants.DEFAULT_DEMO_USER,
                EmailConfirmed = true
            };
            await userManager.CreateAsync(demoUser, AuthorizationConstants.DEFAULT_PASSWORD);
        }
    }

--------------------------------------------------------------------------------------------------

35- Program.cs içerisinde "var shopContext = scope.ServiceProvider.GetRequiredService<ShopContext>(); // db'yi program çalışmadan önce enjekte ettik" kodunun altına

    var identityContext = scope.ServiceProvider.GetRequiredService<AppIdentityDbContext>();
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

    await ShopContextSeed.SeedAsync(shopContext);
    await AppIdentityDbContextSeed.SeedAsync(identityContext, roleManager, userManager);

ekliyoruz

--------------------------------------------------------------------------------------------------

36- Infrastructure/Data  içine "EfRepository.cs" sınıfı aç ve "IRepository.cs" i implement et

EFRepository.cs.txt dosyasını bu sınıfa yapıştır

/*
_db.Set<T>().Add(entity);
_db.Add(entity);  		bu iki metot aynı şey


Specification kurulumu için 
Install-Package Ardalis.Specification.EntityFrameworkCore  -v 6.1.0
Install-Package Ardalis.Specification  -v 6.1.0

örnek olarak 

        public Task<T> FirstAsync(ISpecification<T> specification)
        {
            return _db.Set<T>().WithSpecification(specification).FirstAsync(); bu kod gelecek olan sorguyu karşılayıp türünü generic olarak dönüştürecek gibi düşünebiliriz
        }
*/

--------------------------------------------------------------------------------------------------

37- Web katmanında "Program.cs" içinde servislere ekle (web katmanında interface kullanacağımız için "IRepository" gördüğümüz yerde "EFRepository" kullan gibi düşünebiliriz)

builder.Services.AddScoped(typeof(IRepository<>), typeof(EFRepository<>)); 

--------------------------------------------------------------------------------------------------

38- usinglere ekle/değiştir
global using ApplicationCore.Interfaces;
global using ApplicationCore.Entities;

--------------------------------------------------------------------------------------------------

39- Projeyi denemek için Home > Index > View içine 
@inject IRepository<Product> ProductRepo
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<ul>
    @foreach (var item in await ProductRepo.GetAllAsync())
    {
        <li>@item.Name @item.Price.ToString("c2")</li>

    }
</ul>

--------------------------------------------------------------------------------------------------

40- Uygulamanın para birimini deiştirmek için "Program.cs" app.UseStaticFiles(); altına ekle

app.UseRequestLocalization("en-US");

--------------------------------------------------------------------------------------------------

41- 

--------------------------------------------------------------------------------------------------

42- 

--------------------------------------------------------------------------------------------------

43- 

--------------------------------------------------------------------------------------------------

44- 

--------------------------------------------------------------------------------------------------

45- 

--------------------------------------------------------------------------------------------------

46- 









































